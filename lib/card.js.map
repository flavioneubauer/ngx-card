{"version":3,"file":"card.js","sourceRoot":"","sources":["../temp/inline/card.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, Input, ContentChildren, QueryList, ElementRef } from '@angular/core';\nimport { NgxCardNumberTemplate, NgxCardNameTemplate, NgxCardExpiryTemplate, NgxCardCvcTemplate } from './inputs';\n\ndeclare var Card;\n\nconst defaultPlaceholders = {\n\tnumber: '•••• •••• •••• ••••',\n\tname: 'Full Name',\n\texpiry: '••/••',\n\tcvc: '•••',\n};\n\nconst defaultMessages = {\n\tvalidDate: 'valid\\nthru',\n\tmonthYear: 'month/year',\n};\n\n@Directive({\n  selector: '[card]'\n})\nexport class NgxCard {\n\n\t// a selector or DOM element for the container\n\t// where you want the card to appear\n\t@Input() container: any;\n\n\t@Input('card-width') width: number; // optional — default 350px\n\n\t// Strings for translation - optional\n\t_messages;\n\t@Input() set messages(_messages: any) {\n\t\tthis._messages = Object.assign({}, defaultMessages, _messages);\n\t}\n\tget messages() {\n\t\treturn this._messages;\n\t}\n\n\t// Default placeholders for rendered fields - optional\n\t_placeholders;\n\t@Input() set placeholders(_placeholders: any) {\n\t\tthis._placeholders = Object.assign({}, defaultPlaceholders, _placeholders);\n\t}\n\tget placeholders() {\n\t\treturn this._placeholders;\n\t}\n\n\t@Input() masks: any;\n\n\t@Input() formatting: boolean = true; // optional - default true\n\n\t// if true, will log helpful messages for setting up Card\n\t@Input() debug: boolean = false; // optional - default false\n\n\t@ContentChildren(NgxCardNumberTemplate,  {descendants: true}) numbers: QueryList<NgxCardNumberTemplate>;\n\t@ContentChildren(NgxCardNameTemplate,  {descendants: true}) names: QueryList<NgxCardNameTemplate>;\n\t@ContentChildren(NgxCardExpiryTemplate,  {descendants: true}) expiries: QueryList<NgxCardExpiryTemplate>;\n\t@ContentChildren(NgxCardCvcTemplate,  {descendants: true}) cvcs: QueryList<NgxCardCvcTemplate>;\n\n\tconstructor(private element: ElementRef) {}\n\n\tngAfterViewInit() {\n\t\tconsole.log(\"NgxCardIonicDirective::ngAfterViewInit()\");\n\t\tconsole.dir(this.element);\n\t\tnew Card({\n\t\t\tform: this.element.nativeElement,\n\t\t\tcontainer: this.container,\n\t\t\twidth: this.width,\n\t\t\tformSelectors: {\n\t\t\t\tnumberInput: this.findInputSelectors(this.numbers),\n\t\t\t\texpiryInput: this.findInputSelectors(this.expiries),\n\t\t\t\tcvcInput: this.findInputSelectors(this.cvcs),\n\t\t\t\tnameInput: this.findInputSelectors(this.names),\n\t\t\t},\n\t\t\tformatting: this.formatting,\n\t\t\tmessages: this.messages,\n\t\t\tplaceholders: this.placeholders,\n\t\t\tmasks: this.masks,\n\t\t\tdebug: this.debug,\n\t\t});\n\t}\n/*\n\tfindSelectors(list: QueryList<any>): string {\n\t\treturn list.map(template => template.elementRef.nativeElement.tagName.toLowerCase() + '[name=\"' + template.name + '\"]').join(', ');\n\t}\n*/\n\tfindInputSelectors(list: QueryList<any>): string {\n\t\treturn list.map(template => `input[name=\"${template.name}\"]`).join(', ');\n\t}\n\n};\n"]}